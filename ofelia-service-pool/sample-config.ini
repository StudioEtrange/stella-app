[global]

# Address of the SMTP server
# smtp-host =
# Port number of the SMTP server
# smtp-port =
# User name used to connect to the SMTP server
# smtp-user =
# Password used to connect to the SMTP server
# smtp-password =
# Mail address of the receiver of the mail
# email-to =
# Mail address of the sender of the mail
# email-from =
# Only send a mail if the execution was not successful
# mail-only-on-error =



# Directory inside docker in which the reports shall be written
# it will be fixed as a fixed value by ofelia-service.sh
save-folder = /foo/bar
# Only save a report if the execution was not successful
save-only-on-error = false



# URL of the slack webhook
# slack-webhook =
# Only send a slack message if the execution was not successful
# slack-only-on-error =



# Kind of jobs:
#   - job-exec: this job is executed inside of a running container
#   - job-run: runs a command inside of a new container, using a specific image
#   - job-local: runs the command inside of the host running ofelia
#     NOTE : job-local cannot be used when docker is run from inside a container
#   - job-service-run: runs the command inside a new "run-once" service, for running inside a swarm

# Job scheduling format: https://godoc.org/github.com/robfig/cron


[job-local "job-executed-on-current-host"]
schedule = @hourly
command = touch /tmp/example


[job-run "job-executed-on-new-container"]
schedule = @hourly
image = ubuntu:latest
user = root
tty = false
delete = true
command = echo "hello from ubuntu"

[job-run "job-executed-on-new-container"]
schedule = @every 10s
image = alpine
command = echo Hello, world from alpine!
# If a job has the option no-overlap set, it will not be run concurrently
no-overlap = true


#[job-exec "job-executed-on-running-container"]
#schedule = @hourly
#container = my-container
#command = touch /tmp/example


#[job-service-run "service-executed-on-new-container"]
#schedule= 0,20,40 * * * *
#image = ubuntu
#network = swarm_network
#command =  touch /tmp/example
